name: dairy_submodule_update_check
on:
  schedule:
  - cron: "0 0 * * *"

  workflow_dispatch:
 
permissions:
  pages: write
  id-token: write
  contents: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-submodule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}  # リポジトリを現在のリポジトリに設定
          submodules: 'recursive'  # サブモジュールを再帰的にチェックアウト
      - name: Update submodules
        run: git submodule update --remote --recursive 

      - name: Check git dif & set status
        id: status
        run: echo "status=$(git status -s)" >> $GITHUB_ENV
      

  push:

    if: ${{ status }}
    runs-on: ubuntu-latest
    steps:
      - uses: snow-actions/git-config-user@v1.0.0
        with:
          name:  ${{secrets.USER_NAME}}
          email: ${{secrets.USER_EMAIL}}
      - run: |
          set -x
          git add .
          git commit -m 'Update submodle' 
          git push 
       # Checkout the latest commit after submodule update
      - name: Checkout latest commit
        run: git checkout ${{ github.sha }}

  # Build job
  build:
    if: ${{ status }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}  # リポジトリを現在のリポジトリに設定
          ref: ${{ github.sha }}  # 最新のコミットをチェックアウトして、更新されたサブモジュールのデータを含める  
          submodules: 'recursive'  # サブモジュールを再帰的にチェックアウト

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
